def test(model, loader, criterion):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in loader:
            data, target = data.to(device), target.to(device)
            one_hot = torch.eye(number_of_classes).to(device).index_select(dim=0, index=target)
            output, recon = model(data, one_hot)
            loss = criterion(data, one_hot, output, recon)
            test_loss += loss.item()
            
            # Prediction
            pred = output.norm(dim=-1).max(1)[1]
            correct += pred.eq(target).sum().item()
    test_loss /= len(loader.dataset)
    accuracy = 100. * correct / len(loader.dataset)
    print(f"====> Test set loss: {test_loss:.4f}, Accuracy: {correct}/{len(loader.dataset)} ({accuracy:.2f}%)")
